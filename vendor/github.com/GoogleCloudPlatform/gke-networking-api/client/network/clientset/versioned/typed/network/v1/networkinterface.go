/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/GoogleCloudPlatform/gke-networking-api/apis/network/v1"
	scheme "github.com/GoogleCloudPlatform/gke-networking-api/client/network/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// NetworkInterfacesGetter has a method to return a NetworkInterfaceInterface.
// A group's client should implement this interface.
type NetworkInterfacesGetter interface {
	NetworkInterfaces(namespace string) NetworkInterfaceInterface
}

// NetworkInterfaceInterface has methods to work with NetworkInterface resources.
type NetworkInterfaceInterface interface {
	Create(ctx context.Context, networkInterface *v1.NetworkInterface, opts metav1.CreateOptions) (*v1.NetworkInterface, error)
	Update(ctx context.Context, networkInterface *v1.NetworkInterface, opts metav1.UpdateOptions) (*v1.NetworkInterface, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, networkInterface *v1.NetworkInterface, opts metav1.UpdateOptions) (*v1.NetworkInterface, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.NetworkInterface, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.NetworkInterfaceList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.NetworkInterface, err error)
	NetworkInterfaceExpansion
}

// networkInterfaces implements NetworkInterfaceInterface
type networkInterfaces struct {
	*gentype.ClientWithList[*v1.NetworkInterface, *v1.NetworkInterfaceList]
}

// newNetworkInterfaces returns a NetworkInterfaces
func newNetworkInterfaces(c *NetworkingV1Client, namespace string) *networkInterfaces {
	return &networkInterfaces{
		gentype.NewClientWithList[*v1.NetworkInterface, *v1.NetworkInterfaceList](
			"networkinterfaces",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.NetworkInterface { return &v1.NetworkInterface{} },
			func() *v1.NetworkInterfaceList { return &v1.NetworkInterfaceList{} }),
	}
}
