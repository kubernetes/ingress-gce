//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.Label":                     schema_pkg_apis_negcontrollerconfig_v1beta1_Label(ref),
		"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.NEGControllerConfig":       schema_pkg_apis_negcontrollerconfig_v1beta1_NEGControllerConfig(ref),
		"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.NEGControllerConfigSpec":   schema_pkg_apis_negcontrollerconfig_v1beta1_NEGControllerConfigSpec(ref),
		"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.PodLabelPropagationConfig": schema_pkg_apis_negcontrollerconfig_v1beta1_PodLabelPropagationConfig(ref),
	}
}

func schema_pkg_apis_negcontrollerconfig_v1beta1_Label(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Label contains configuration for a label to be propagated to GCE network endpoints.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"shortKey": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"maxValueSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
				},
				Required: []string{"key", "shortKey", "maxValueSizeBytes"},
			},
		},
	}
}

func schema_pkg_apis_negcontrollerconfig_v1beta1_NEGControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.NEGControllerConfigSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.NEGControllerConfigSpec"},
	}
}

func schema_pkg_apis_negcontrollerconfig_v1beta1_NEGControllerConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NEGControllerConfigSpec is the spec for NEGControllerConfig resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podLabelPropagation": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.PodLabelPropagationConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.PodLabelPropagationConfig"},
	}
}

func schema_pkg_apis_negcontrollerconfig_v1beta1_PodLabelPropagationConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodLabelPropagationConfig contains a list of configurations for labels to be propagated to GCE network endpoints.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.Label"),
									},
								},
							},
						},
					},
				},
				Required: []string{"labels"},
			},
		},
		Dependencies: []string{
			"k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1.Label"},
	}
}
