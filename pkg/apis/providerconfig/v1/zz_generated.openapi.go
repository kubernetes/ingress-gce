//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfig":     schema_pkg_apis_providerconfig_v1_ProviderConfig(ref),
		"k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfigSpec": schema_pkg_apis_providerconfig_v1_ProviderConfigSpec(ref),
	}
}

func schema_pkg_apis_providerconfig_v1_ProviderConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderConfig is the Schema for the ProviderConfig resource in the Multi-Project cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfigSpec", "k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderConfigStatus"},
	}
}

func schema_pkg_apis_providerconfig_v1_ProviderConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProviderConfigSpec defines the desired state of ProviderConfig.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projectNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectNumber is the GCP project number.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID is the GCP Project ID.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pscConnectionID": {
						SchemaProps: spec.SchemaProps{
							Description: "PSC connection ID of the PSC endpoint.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"networkConfig": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderNetworkConfig"),
						},
					},
					"principalInfo": {
						SchemaProps: spec.SchemaProps{
							Description: "PrincipalInfo contains information about the principal entity associated with this configuration. This field is optional.",
							Ref:         ref("k8s.io/ingress-gce/pkg/apis/providerconfig/v1.PrincipalInfo"),
						},
					},
				},
				Required: []string{"projectNumber", "projectID", "pscConnectionID", "networkConfig", "principalInfo"},
			},
		},
		Dependencies: []string{
			"k8s.io/ingress-gce/pkg/apis/providerconfig/v1.PrincipalInfo", "k8s.io/ingress-gce/pkg/apis/providerconfig/v1.ProviderNetworkConfig"},
	}
}
