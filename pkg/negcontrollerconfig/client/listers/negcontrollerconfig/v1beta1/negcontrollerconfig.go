/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "k8s.io/ingress-gce/pkg/apis/negcontrollerconfig/v1beta1"
)

// NEGControllerConfigLister helps list NEGControllerConfigs.
// All objects returned here must be treated as read-only.
type NEGControllerConfigLister interface {
	// List lists all NEGControllerConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NEGControllerConfig, err error)
	// NEGControllerConfigs returns an object that can list and get NEGControllerConfigs.
	NEGControllerConfigs(namespace string) NEGControllerConfigNamespaceLister
	NEGControllerConfigListerExpansion
}

// nEGControllerConfigLister implements the NEGControllerConfigLister interface.
type nEGControllerConfigLister struct {
	indexer cache.Indexer
}

// NewNEGControllerConfigLister returns a new NEGControllerConfigLister.
func NewNEGControllerConfigLister(indexer cache.Indexer) NEGControllerConfigLister {
	return &nEGControllerConfigLister{indexer: indexer}
}

// List lists all NEGControllerConfigs in the indexer.
func (s *nEGControllerConfigLister) List(selector labels.Selector) (ret []*v1beta1.NEGControllerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NEGControllerConfig))
	})
	return ret, err
}

// NEGControllerConfigs returns an object that can list and get NEGControllerConfigs.
func (s *nEGControllerConfigLister) NEGControllerConfigs(namespace string) NEGControllerConfigNamespaceLister {
	return nEGControllerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NEGControllerConfigNamespaceLister helps list and get NEGControllerConfigs.
// All objects returned here must be treated as read-only.
type NEGControllerConfigNamespaceLister interface {
	// List lists all NEGControllerConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NEGControllerConfig, err error)
	// Get retrieves the NEGControllerConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NEGControllerConfig, error)
	NEGControllerConfigNamespaceListerExpansion
}

// nEGControllerConfigNamespaceLister implements the NEGControllerConfigNamespaceLister
// interface.
type nEGControllerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NEGControllerConfigs in the indexer for a given namespace.
func (s nEGControllerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NEGControllerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NEGControllerConfig))
	})
	return ret, err
}

// Get retrieves the NEGControllerConfig from the indexer for a given namespace and name.
func (s nEGControllerConfigNamespaceLister) Get(name string) (*v1beta1.NEGControllerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("negcontrollerconfig"), name)
	}
	return obj.(*v1beta1.NEGControllerConfig), nil
}
