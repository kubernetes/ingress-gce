/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/ingress-gce/pkg/apis/providerconfig/v1"
)

// ProviderConfigLister helps list ProviderConfigs.
// All objects returned here must be treated as read-only.
type ProviderConfigLister interface {
	// List lists all ProviderConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProviderConfig, err error)
	// Get retrieves the ProviderConfig from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ProviderConfig, error)
	ProviderConfigListerExpansion
}

// providerConfigLister implements the ProviderConfigLister interface.
type providerConfigLister struct {
	indexer cache.Indexer
}

// NewProviderConfigLister returns a new ProviderConfigLister.
func NewProviderConfigLister(indexer cache.Indexer) ProviderConfigLister {
	return &providerConfigLister{indexer: indexer}
}

// List lists all ProviderConfigs in the indexer.
func (s *providerConfigLister) List(selector labels.Selector) (ret []*v1.ProviderConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProviderConfig))
	})
	return ret, err
}

// Get retrieves the ProviderConfig from the index for a given name.
func (s *providerConfigLister) Get(name string) (*v1.ProviderConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("providerconfig"), name)
	}
	return obj.(*v1.ProviderConfig), nil
}
